import matplotlib.pyplot as plt
import numpy as np

def colour_map(col, i):
    """Map the input color values through a sinusoidal function adjusted by iteration i."""
    k = col + i/4
    return (1+np.cos(450*k))/3

def spherical_to_cartesian(radius, polar_angle, azimuth_angle):
    """Convert spherical coordinates to Cartesian coordinates."""
    x = radius * np.sin(polar_angle) * np.cos(azimuth_angle)
    y = radius * np.sin(polar_angle) * np.sin(azimuth_angle)
    z = radius * np.cos(polar_angle)
    return x, y, z

def stereographic_projection(x, y, z):
    """Project the 3D points on the sphere to 2D plane using stereographic projection."""
    denominator = 1 - z
    u = x / denominator
    v = y / denominator
    return u, v

# Sphere parameters
radius = 1
theta_values = np.linspace(0, np.pi, 100)  # Polar angles
phi_values = np.linspace(0, 2 * np.pi, 100)  # Azimuth angles

# Generate sphere coordinates
sphere_x, sphere_y, sphere_z = [], [], []
for theta in theta_values:
    for phi in phi_values:
        x, y, z = spherical_to_cartesian(radius, theta, phi)
        sphere_x.append(x)
        sphere_y.append(y)
        sphere_z.append(z)

# Prepare to display the plots
plt.ion()  # Turn on interactive mode
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))

# Setup 3D subplot for the sphere
ax1 = fig.add_subplot(121, projection='3d')
ax2 = fig.add_subplot(122)  # 2D subplot for the projection

for i in range(100):  # Number of frames; adjust for longer or shorter animation
    ax1.clear()  # Clear the 3D plot
    ax2.clear()  # Clear the 2D plot

    # Calculate colors based on the current frame
    colors = [(colour_map((x + 1) / 2, i / 10.0), colour_map((y + 1) / 2, i / 10.0), colour_map((z + 1) / 2, i / 10.0)) for x, y, z in zip(sphere_x, sphere_y, sphere_z)]
    u, v = stereographic_projection(np.array(sphere_x), np.array(sphere_y), np.array(sphere_z))

    # Plot the sphere in 3D
    ax1.scatter(sphere_x, sphere_y, sphere_z, c=colors)
    ax1.set_title(f'3D Sphere - Frame {i}')
    ax1.set_xlim([-1, 1])
    ax1.set_ylim([-1, 1])
    ax1.set_zlim([-1, 1])

    # Plot the 2D projection
    ax2.scatter(u, v, c=colors)
    ax2.set_title('2D Stereographic Projection')
    ax2.set_xlim([-10, 10])
    ax2.set_ylim([-10, 10])
    ax2.set_aspect('equal')

    plt.draw()
    plt.pause(0.05)  # Pause to show the plot

plt.ioff()  # Turn off interactive plotting
plt.show()
